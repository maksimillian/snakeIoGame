{
  "name": "server-api",
  "description": "NestJS server with Socket.IO for browser-based Snake.io game with auto-management and bots",
  "root": "server",
  "template": {
    "repo": "erickmarx/chat-api",
    "description": "NestJS chat API with Socket.IO and Prisma"
  },
  "dependencies": {
    "database": {
      "models": ["Player", "Server", "Room", "PlayerSession", "Skin", "PlayerSkin", "Bot"]
    }
  },
  "api": {
    "events": {
      "player:join": "Player joins a room (auto-assigned or friend code)",
      "player:leave": "Player leaves a room",
      "snake:spawn": "Create new snake session",
      "snake:move": "Update snake position based on mouse direction",
      "snake:boost": "Activate speed boost (holding LMB)",
      "snake:die": "Handle snake death and update best score",
      "snake:eat": "Handle food consumption and score update",
      "snake:kill": "Handle snake kill and update kill count",
      "room:state": "Broadcast room state to all players",
      "game:state": "Broadcast current game state (snakes, food, scores)",
      "skin:equip": "Equip a skin for player's snake",
      "skin:unlock": "Unlock a new skin for player",
      "server:auto-join": "Auto-assign player to best available server",
      "room:auto-create": "Auto-create new room when needed"
    },
    "endpoints": {
      "auth": {
        "POST /auth/guest": "Create anonymous guest session",
        "POST /auth/register": "Register new player",
        "POST /auth/login": "Player login",
        "POST /auth/upgrade": "Convert guest to registered account",
        "GET /auth/me": "Get current player info",
        "POST /auth/refresh": "Refresh JWT token"
      },
      "rooms": {
        "POST /rooms/play": "Auto-join best available room",
        "POST /rooms/join": "Join room by friend code",
        "GET /rooms/:id": "Get room details",
        "GET /rooms/:id/leaderboard": "Get room leaderboard",
        "GET /rooms/:id/players": "Get active players in room"
      },
      "stats": {
        "GET /stats/session/:id": "Get current session stats",
        "GET /stats/player/:id": "Get player all-time stats",
        "GET /stats/leaderboard": "Get global leaderboard",
        "GET /stats/leaderboard/room/:id": "Get room leaderboard",
        "GET /stats/player/:id/history": "Get player game history"
      },
      "skins": {
        "GET /skins": "List available skins",
        "GET /skins/owned": "List player's owned skins",
        "POST /skins/:id/unlock": "Unlock a skin",
        "POST /skins/:id/equip": "Equip a skin",
        "GET /skins/:id": "Get skin details"
      },
      "servers": {
        "GET /servers": "List available game servers",
        "GET /servers/status": "Get server load and availability",
        "POST /servers/scale": "Scale servers based on demand",
        "DELETE /servers/:id": "Remove empty server"
      }
    }
  },
  "structure": {
    "src": {
      "auth": "Authentication module with guest support",
      "game": "Game logic and WebSocket gateway",
      "bots": "Bot AI and behavior system",
      "prisma": "Database schema and client",
      "rooms": "Room management with auto-matchmaking and auto-creation",
      "stats": "Statistics and leaderboards",
      "servers": "Server management and scaling",
      "dto": "Data Transfer Objects",
      "main.ts": "Application entry point",
      "app.module.ts": "Root module",
      "app.service.ts": "Application service",
      "app.controller.ts": "Application controller"
    }
  },
  "features": {
    "autoManagement": {
      "serverScaling": "Auto-create/delete servers based on player count",
      "loadBalancing": "Distribute players across servers efficiently",
      "roomCreation": "Auto-create rooms when existing ones are full",
      "cleanup": "Remove empty servers and rooms automatically"
    },
    "botSystem": {
      "ai": "Realistic bot behavior and movement",
      "population": "Maintain 7 bots per room minimum",
      "seamless": "Bots indistinguishable from real players",
      "skins": "Bots use random skins to appear authentic"
    },
    "matchmaking": {
      "autoJoin": "One-click play with automatic room assignment",
      "friendCode": "Join specific rooms with friend codes",
      "loadBalancing": "Distribute players across available rooms",
      "capacity": "Auto-create new rooms when needed"
    }
  },
  "docker": {
    "image": "node:18-alpine",
    "port": 3000,
    "environment": {
      "DATABASE_URL": "(.env)",
      "JWT_SECRET": "(.env)",
      "JWT_EXPIRATION": "7d",
      "MAX_PLAYERS_PER_ROOM": "10",
      "MIN_BOTS_PER_ROOM": "7",
      "MAX_SERVERS": "10"
    }
  }
} 