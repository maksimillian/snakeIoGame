generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model Player {
  id           Int             @id @default(autoincrement())
  username     String
  email        String?         @unique
  passwordHash String?
  playerType   PlayerType      @default(GUEST)
  guestId      String?         @unique
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  bestScore    Int             @default(0)
  totalKills   Int             @default(0)
  bestRank     Int?
  totalGames   Int             @default(0)
  sessions     PlayerSession[]
  ownedSkins   PlayerSkin[]
}

model Server {
  id             Int      @id @default(autoincrement())
  region         Region
  capacity       Int      @default(5000)
  currentPlayers Int      @default(0)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  lastActivity   DateTime @updatedAt
  rooms          Room[]
}

model Room {
  id             Int             @id @default(autoincrement())
  serverId       Int
  name           String
  friendCode     String          @unique
  maxPlayers     Int             @default(10)
  currentPlayers Int             @default(0)
  botCount       Int             @default(7)
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  lastActivity   DateTime        @updatedAt
  bots           Bot[]
  sessions       PlayerSession[]
  server         Server          @relation(fields: [serverId], references: [id])
}

model PlayerSession {
  id          Int      @id @default(autoincrement())
  playerId    Int
  roomId      Int
  spawnedAt   DateTime @default(now())
  score       Int      @default(0)
  kills       Int      @default(0)
  topPosition Int?
  length      Int      @default(1)
  isAlive     Boolean  @default(true)
  updatedAt   DateTime @updatedAt
  player      Player   @relation(fields: [playerId], references: [id])
  room        Room     @relation(fields: [roomId], references: [id])
}

model Bot {
  id        Int      @id @default(autoincrement())
  roomId    Int
  name      String
  score     Int      @default(0)
  kills     Int      @default(0)
  length    Int      @default(1)
  isAlive   Boolean  @default(true)
  spawnedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id])
}

model Skin {
  id            Int            @id @default(autoincrement())
  name          String
  rarity        Int            @default(1)
  unlockType    SkinUnlockType
  priceCoins    Int?
  scoreRequired Int?
  assetUrl      String
  owners        PlayerSkin[]
}

model PlayerSkin {
  id         Int      @id @default(autoincrement())
  playerId   Int
  skinId     Int
  unlockedAt DateTime @default(now())
  isEquipped Boolean  @default(false)
  player     Player   @relation(fields: [playerId], references: [id])
  skin       Skin     @relation(fields: [skinId], references: [id])
}

enum Region {
  USEast
  USWest
  Europe
  Asia
  Oceania
}

enum SkinUnlockType {
  FREE
  SCORE_GATE
  COIN_PURCHASE
  EVENT
}

enum PlayerType {
  GUEST
  REGISTERED
}
